listen_addr = ":8125"
admin_addr = ":8126"
profile_addr = "" # set to ":6060" or something to enable profiling endpoints.
graphite_addr = "127.0.0.1:2003"
flush_interval = 10
processes = 4

# statsdaemon submits internal metrics using itself.
# with this key you can separate stats of separate instances
# if this value is or expands to an empty string, it will be set to 'null'
# supported variables:
#  ${HOST} : hostname
instance = "${HOST}"

# outputs

orgid = 1
enabletsdbgw  = false
enablegraphite = true
tsdbgw_addr = "localhost:8081"
tsdbgw_api_key = "unsecure"

# prefixes for the various types.  they should probably end with a dot.
# Defaults are in line with etsy statsd using legacy namespacing (not recommended)
legacy_namespace = true
prefix_rates = "stats."
prefix_counters = "stats_counts."
prefix_timers = "stats.timers."
prefix_gauges = "stats.gauges."

# Recommended (legacy_namespace = false)
# counts -> stats.counters.$metric.count
# rates -> stats.counters.$metric.rate

#legacy_namespace = false
#prefix_rates = "stats.counters."
#prefix_counters = "stats.counters."
#prefix_timers = "stats.timers."
#prefix_gauges = "stats.gauges."

# prefixes for metrics2.0 metrics
# using this you can add tags, like "foo=bar.baz=quux."
# note that you should use '=' here.
# If your metrics use the '_is_' style, then we'll automatically apply the converted prefix instead.
# note that these prefixes are also applied to the metrics2.0 stats emitted by statsdaemon itself.
prefix_m20_rates = ""
prefix_m20_counters = ""
prefix_m20_timers = ""
prefix_m20_gauges = ""

# send rates for counters (using prefix_rates)
flush_rates = true
# send count for counters (using prefix_counters)
flush_counts = false

percentile_thresholds = "90,75"
max_timers_per_s = 1000

# debug = log outgoing metrics, bad lines, and received admin commands
log_level = "info"

#
# trigger cpu or memory profiles when cpu/heap usage thresholds are met?
#

proftrigger_path = "/tmp/profiletrigger/"

# inspect status frequency. set to something like 10s . 0 disables.
proftrigger_heap_freq = "0"
# minimum time between triggered profiles
proftrigger_heap_min_diff = "1h"
# if this many bytes allocated, trigger a profile
proftrigger_heap_thresh = 10000000

# inspect status frequency. set to something like 10s . 0 disables.
proftrigger_cpu_freq = "0"
# minimum time between triggered profiles
proftrigger_cpu_min_diff = "1h"
# duration of cpu profile
proftrigger_cpu_dur = "5s"
# if this much percent cpu used, trigger a profile
proftrigger_cpu_thresh = 80
